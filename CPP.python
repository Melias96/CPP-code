graph =   [[0, 1, 0, 2, 0, 0], #A
          [1, 0, 3, 5, 0, 0], #B
          [0, 3, 0, 0, 6, 2], #C
          [2, 5, 0, 0, 4, 0], #D
          [0, 0, 6, 4, 0, 1], #E 
          [0, 0, 2, 0, 1, 0]  #F
      ]; 

def sum_edges(graph):
  w_sum = 0
  l = len(graph)
  for i in range(l):
    for j in range(i,l):
      w_sum += graph[i][j]
  return w_sum
# Utilizes Dijkstra algorithm
def dijkstra(graph, source, dest):
  s = [0 for i in range(len(graph))]
  selected = [source]
  l = len(graph)
  inf = 10000000
  m_sel = inf
  for i in range(l):
    if(i==source):
      s[source] = 0 
    else:
        if(graph[source][i]==0):
          s[i] = inf
        else:
          s[i] = graph[source][i]
          if(s[i] < m_sel):
            m_sel = s[i]
            ind = i    
  if(source==dest):
    return 0
  selected.append(ind) 
  while(ind!=dest):
    for i in range(l):
      if i not in selected:
        if(graph[ind][i]!=0):
          if((graph[ind][i] + m_sel) < s[i]):
            s[i] = graph[ind][i] + m_sel
    temp_min = 1000000
    for j in range(l):
      if j not in selected:
        if(s[j] < temp_min):
          temp_min = s[j]
          ind = j
    m_sel = temp_min
    selected.append(ind)
  return s[dest]
def get_odd(graph):
  degrees = [0 for i in range(len(graph))]
  for i in range(len(graph)):
    for j in range(len(graph)):
      if(graph[i][j]!=0):
        degrees[i]+=1
  odds = [i for i in range(len(degrees)) if degrees[i]%2!=0]
  return odds
#Search for pairs within the graph
def gen_pairs(odds):
  pairs = []
  for i in range(len(odds)-1):
    pairs.append([])
    for j in range(i+1,len(odds)):
      pairs[i].append([odds[i],odds[j]])
  return pairs
#Final formulation of the graph
def Chinese_Postman(graph):
  odds = get_odd(graph)
  if(len(odds)==0):
    return sum_edges(graph)
  pairs = gen_pairs(odds)
  l = (len(pairs)+1)//2
  pairings_sum = []
  def get_pairs(pairs, done = [], final = []):
    if(pairs[0][0][0] not in done):
      done.append(pairs[0][0][0])
      for i in pairs[0]:
        f = final[:]
        val = done[:]
        if(i[1] not in val):
          f.append(i)
        else:
          continue
        if(len(f)==l):
          pairings_sum.append(f)
          return 
        else:
          val.append(i[1])
          get_pairs(pairs[1:],val, f)   
    else:
      get_pairs(pairs[1:], done, final)
  get_pairs(pairs)
  min_sums = []
  for i in pairings_sum:
    s = 0
    for j in range(len(i)):
      s += dijkstra(graph, i[j][0], i[j][1])
    min_sums.append(s)
  a_dis = min(min_sums)
  c_dis = a_dis + sum_edges(graph)
  return c_dis    
print('Chinese Postman Problem Distance:',Chinese_Postman(graph))
